{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>   A modern, fully static, fast, secure fully proxied, highly customizable application dashboard with integrations for over 100 services and translations into multiple languages. Easily configured via YAML files or through docker label discovery.   </p> <p> \u00a0 Install on Docker </p> <p> \u00a0 Install on Kubernetes </p> <p> \u00a0 Install on UNRAID </p> <p> \u00a0 Building from source </p>"},{"location":"configs/bookmarks/","title":"Bookmarks","text":"<p>Bookmarks function much the same as Services, in how groups and lists work. They're just much simpler, smaller, and contain no extra features other than being a link out.</p> <p>The design of homepage expects <code>abbr</code> to be 2 letters, but is not otherwise forced.</p> <p>You can also use an icon for bookmarks similar to the options for service icons. If both icon and abbreviation are supplied, the icon takes precedence.</p> <pre><code>- Developer:\n- Github:\n- abbr: GH\nhref: https://github.com/\n- Social:\n- Reddit:\n- icon: reddit.png\nhref: https://reddit.com/\n- Entertainment:\n- YouTube:\n- abbr: YT\nhref: https://youtube.com/\n</code></pre> <p></p>"},{"location":"configs/custom-css-js/","title":"Custom CSS & JS","text":"<p>As of version v0.6.30 homepage supports adding your own custom css &amp; javascript. Please do so at your own risk.</p> <p>To add custom css simply edit the <code>custom.css</code> file under your config directory, similarly for javascript you would edit <code>custom.js</code>. You can then target elements in homepage with various classes / ids to customize things to your liking.</p> <p>You can also set a specific <code>id</code> for a service or bookmark to target with your custom css or javascript, e.g.</p> <pre><code>Service:\nid: myserviceid\nicon: icon.png\n...\n</code></pre>"},{"location":"configs/docker/","title":"Docker","text":"<p>Docker instances are configured inside the <code>docker.yaml</code> file. Both IP:PORT and Socket connections are supported.</p> <p>For IP:PORT, simply make sure your Docker instance has been configured to accept API traffic over the HTTP API.</p> <pre><code>my-remote-docker:\nhost: 192.168.0.101\nport: 2375\n</code></pre>"},{"location":"configs/docker/#using-docker-tls","title":"Using Docker TLS","text":"<p>Since Docker supports connecting with TLS and client certificate authentication, you can include TLS details when connecting to the HTTP API. Further details of setting up Docker to accept TLS connections, and generation of the keys and certs can be found in the Docker documentation. The file entries are relative to the <code>config</code> directory (location of <code>docker.yaml</code> file).</p> <pre><code>my-remote-docker:\nhost: 192.168.0.101\nport: 275\ntls:\nkeyFile: tls/key.pem\ncaFile: tls/ca.pem\ncertFile: tls/cert.pem\n</code></pre>"},{"location":"configs/docker/#using-docker-socket-proxy","title":"Using Docker Socket Proxy","text":"<p>Due to security concerns with exposing the docker socket directly, you can use a docker-socket-proxy container to expose the docker socket on a more restricted and secure API.</p> <p>Here is an example docker-compose file that will expose the docker socket, and then connect to it from the homepage container:</p> <pre><code>dockerproxy:\nimage: ghcr.io/tecnativa/docker-socket-proxy:latest\ncontainer_name: dockerproxy\nenvironment:\n- CONTAINERS=1 # Allow access to viewing containers\n- SERVICES=1 # Allow access to viewing services (necessary when using Docker Swarm)\n- TASKS=1 # Allow access to viewing tasks (necessary when using Docker Swarm)\n- POST=0 # Disallow any POST operations (effectively read-only)\nports:\n- 127.0.0.1:2375:2375\nvolumes:\n- /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only\nrestart: unless-stopped\nhomepage:\nimage: ghcr.io/benphelps/homepage:latest\ncontainer_name: homepage\nvolumes:\n- /path/to/config:/app/config\nports:\n- 3000:3000\nrestart: unless-stopped\n</code></pre> <p>Then, inside of your <code>docker.yaml</code> settings file, you'd configure the docker instance like so:</p> <pre><code>my-docker:\nhost: dockerproxy\nport: 2375\n</code></pre>"},{"location":"configs/docker/#using-socket-directly","title":"Using Socket Directly","text":"<p>If you'd rather use the socket directly, first make sure that you're passing the local socket into the Docker container.</p> <p>Note that in order to use the socket directly homepage must be running as root</p> <pre><code>homepage:\nimage: ghcr.io/benphelps/homepage:latest\ncontainer_name: homepage\nvolumes:\n- /path/to/config:/app/config\n- /var/run/docker.sock:/var/run/docker.sock # pass local proxy\nports:\n- 3000:3000\nrestart: unless-stopped\n</code></pre> <p>If you're using <code>docker run</code>, this would be <code>-v /var/run/docker.sock:/var/run/docker.sock</code>.</p> <p>Then, inside of your <code>docker.yaml</code> settings file, you'd configure the docker instance like so:</p> <pre><code>my-docker:\nsocket: /var/run/docker.sock\n</code></pre>"},{"location":"configs/docker/#services","title":"Services","text":"<p>Once you've configured your docker instances, you can then apply them to your services, to get stats and status reporting shown.</p> <p>Inside of the service you'd like to connect to docker:</p> <pre><code>- Emby:\nicon: emby.png\nhref: \"http://emby.home/\"\ndescription: Media server\nserver: my-docker # The docker server that was configured\ncontainer: emby # The name of the container you'd like to connect\n</code></pre>"},{"location":"configs/docker/#automatic-service-discovery","title":"Automatic Service Discovery","text":"<p>Homepage features automatic service discovery for containers with the proper labels attached, all configuration options can be applied using dot notation, beginning with <code>homepage</code>.</p> <p>Below is an example of the same service entry shown above, as docker labels.</p> <pre><code>services:\nemby:\nimage: lscr.io/linuxserver/emby:latest\ncontainer_name: emby\nports:\n- 8096:8096\nrestart: unless-stopped\nlabels:\n- homepage.group=Media\n- homepage.name=Emby\n- homepage.icon=emby.png\n- homepage.href=http://emby.home/\n- homepage.description=Media server\n</code></pre> <p>When your Docker instance has been properly configured, this service will be automatically discovered and added to your Homepage. You do not need to specify the <code>server</code> or <code>container</code> values, as they will be automatically inferred.</p> <p>When using docker swarm use deploy/labels</p>"},{"location":"configs/docker/#widgets","title":"Widgets","text":"<p>You may also configure widgets, along with the standard service entry, again, using dot notation.</p> <pre><code>labels:\n- homepage.group=Media\n- homepage.name=Emby\n- homepage.icon=emby.png\n- homepage.href=http://emby.home/\n- homepage.description=Media server\n- homepage.widget.type=emby\n- homepage.widget.url=http://emby.home\n- homepage.widget.key=yourembyapikeyhere\n- homepage.widget.fields=[\"field1\",\"field2\"] # optional\n</code></pre>"},{"location":"configs/docker/#docker-swarm","title":"Docker Swarm","text":"<p>Docker swarm is supported and Docker services are specified with the same <code>server</code> and <code>container</code> notation. To enable swarm support you will need to include a <code>swarm</code> setting in your docker.yaml, e.g.</p> <pre><code>my-docker:\nsocket: /var/run/docker.sock\nswarm: true\n</code></pre> <p>For the automatic service discovery to discover all services it is important that homepage should be deployed on a manager node. Set deploy requirements to the master node in your stack yaml config, e.g.</p> <pre><code>....\ndeploy:\nplacement:\nconstraints:\n- node.role == manager\n...\n</code></pre> <p>In order to detect every service within the Docker swarm it is necessary that service labels should be used and not container labels. Specify the homepage labels as:</p> <pre><code>....\ndeploy:\nlabels:\n- homepage.icon=foobar\n...\n</code></pre>"},{"location":"configs/docker/#ordering","title":"Ordering","text":"<p>As of v0.6.4 discovered services can include an optional <code>weight</code> field to determine sorting such that:</p> <ul> <li>Default weight for discovered services is 0</li> <li>Default weight for configured services is their index within their group scaled by 100, i.e. (index + 1) * 100</li> <li>If two items have the same weight value, then they will be sorted by name</li> </ul>"},{"location":"configs/docker/#show-stats","title":"Show stats","text":"<p>You can show the docker stats by clicking the status indicator but this can also be controlled per-service with:</p> <pre><code>- Example Service:\n...\nshowStats: true\n</code></pre> <p>Also see the settings for show docker stats.</p>"},{"location":"configs/kubernetes/","title":"Kubernetes","text":"<p>The Kubernetes connectivity has the following requirements:</p> <ul> <li>Kubernetes 1.19+</li> <li>Metrics Service</li> <li>An Ingress controller</li> </ul> <p>The Kubernetes connection is configured in the <code>kubernetes.yaml</code> file. There are 3 modes to choose from:</p> <ul> <li>disabled - disables kubernetes connectivity</li> <li>default - uses the default kubeconfig resolution</li> <li>cluster - uses a service account inside the cluster</li> </ul> <pre><code>mode: default\n</code></pre>"},{"location":"configs/kubernetes/#services","title":"Services","text":"<p>Once the Kubernetes connection is configured, individual services can be configured to pull statistics. Only CPU and Memory are currently supported.</p> <p>Inside of the service you'd like to connect to a pod:</p> <pre><code>- Emby:\nicon: emby.png\nhref: \"http://emby.home/\"\ndescription: Media server\nnamespace: media # The kubernetes namespace the app resides in\napp: emby # The name of the deployed app\n</code></pre> <p>The <code>app</code> field is used to create a label selector, in this example case it would match pods with the label: <code>app.kubernetes.io/name=emby</code>.</p> <p>Sometimes this is insufficient for complex or atypical application deployments. In these cases, the <code>podSelector</code> field can be used. Any field selector can be used with it, so it allows for some very powerful selection capabilities.</p> <p>For instance, it can be utilized to roll multiple underlying deployments under one application to see a high-level aggregate:</p> <pre><code>- Element Chat:\nicon: matrix-light.png\nhref: https://chat.example.com\ndescription: Matrix Synapse Powered Chat\napp: matrix-element\nnamespace: comms\npodSelector: &gt;-\napp.kubernetes.io/instance in (\nmatrix-element,\nmatrix-media-repo,\nmatrix-media-repo-postgresql,\nmatrix-synapse\n)\n</code></pre> <p>NOTE: A blank string as a podSelector does not deactivate it, but will actually select all pods in the namespace. This is a useful way to capture the resource usage of a complex application siloed to a single namespace, like Longhorn.</p>"},{"location":"configs/kubernetes/#automatic-service-discovery","title":"Automatic Service Discovery","text":"<p>Homepage features automatic service discovery by Ingress annotations. All configuration options can be applied using typical annotation syntax, beginning with <code>gethomepage.dev/</code>.</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\nname: emby\nannotations:\ngethomepage.dev/enabled: \"true\"\ngethomepage.dev/description: Media Server\ngethomepage.dev/group: Media\ngethomepage.dev/icon: emby.png\ngethomepage.dev/name: Emby\ngethomepage.dev/widget.type: \"emby\"\ngethomepage.dev/widget.url: \"https://emby.example.com\"\ngethomepage.dev/podSelector: \"\"\ngethomepage.dev/weight: 10 # optional\nspec:\nrules:\n- host: emby.example.com\nhttp:\npaths:\n- backend:\nservice:\nname: emby\nport:\nnumber: 8080\npath: /\npathType: Prefix\n</code></pre> <p>When the Kubernetes cluster connection has been properly configured, this service will be automatically discovered and added to your Homepage. You do not need to specify the <code>namespace</code> or <code>app</code> values, as they will be automatically inferred.</p>"},{"location":"configs/kubernetes/#traefik-ingressroute-support","title":"Traefik IngressRoute support","text":"<p>Homepage can also read ingresses defined using the Traefik IngressRoute custom resource definition. Due to the complex nature of Traefik routing rules, it is required for the <code>gethomepage.dev/href</code> annotation to be set:</p> <pre><code>apiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\nname: emby\nannotations:\ngethomepage.dev/href: \"https://emby.example.com\"\ngethomepage.dev/enabled: \"true\"\ngethomepage.dev/description: Media Server\ngethomepage.dev/group: Media\ngethomepage.dev/icon: emby.png\ngethomepage.dev/name: Emby\ngethomepage.dev/widget.type: \"emby\"\ngethomepage.dev/widget.url: \"https://emby.example.com\"\ngethomepage.dev/podSelector: \"\"\ngethomepage.dev/weight: 10 # optional\nspec:\nentryPoints:\n- websecure\nroutes:\n- kind: Rule\nmatch: Host(`emby.example.com`)\nservices:\n- kind: Service\nname: emby\nnamespace: emby\nport: 8080\nscheme: http\nstrategy: RoundRobin\nweight: 10\n</code></pre> <p>If the <code>href</code> attribute is not present, Homepage will ignore the specific IngressRoute.</p>"},{"location":"configs/kubernetes/#caveats","title":"Caveats","text":"<p>Similarly to Docker service discovery, there currently is no rigid ordering to discovered services and discovered services will be displayed above those specified in the <code>services.yaml</code>.</p>"},{"location":"configs/services/","title":"Services","text":"<p>Services are configured inside the <code>services.yaml</code> file. You can have any number of groups, and any number of services per group.</p>"},{"location":"configs/services/#groups","title":"Groups","text":"<p>Groups are defined as top-level array entries.</p> <pre><code>- Group A:\n- Service A:\nhref: http://localhost/\n- Group B:\n- Service B:\nhref: http://localhost/\n</code></pre> <p></p>"},{"location":"configs/services/#services","title":"Services","text":"<p>Services are defined as array entries on groups,</p> <pre><code>- Group A:\n- Service A:\nhref: http://localhost/\n- Service B:\nhref: http://localhost/\n- Service C:\nhref: http://localhost/\n- Group B:\n- Service D:\nhref: http://localhost/\n</code></pre> <p></p>"},{"location":"configs/services/#descriptions","title":"Descriptions","text":"<p>Services may have descriptions,</p> <pre><code>- Group A:\n- Service A:\nhref: http://localhost/\ndescription: This is my service\n- Group B:\n- Service B:\nhref: http://localhost/\ndescription: This is another service\n</code></pre> <p></p>"},{"location":"configs/services/#icons","title":"Icons","text":"<p>Services may have an icon attached to them, you can use icons from Dashboard Icons automatically, by passing the name of the icon, with, or without <code>.png</code> or with <code>.svg</code> to use the svg version.</p> <p>You can also specify prefixed icons from Material Design Icons with <code>mdi-XX</code> or Simple Icons with <code>si-XX</code>.</p> <p>You can specify a custom color by adding a hex color code as suffix e.g. <code>mdi-XX-#f0d453</code> or <code>si-XX-#a712a2</code>.</p> <p>To use a remote icon, use the absolute URL (e.g. <code>https://...</code>).</p> <p>To use a local icon, first create a Docker mount to <code>/app/public/icons</code> and then reference your icon as <code>/icons/myicon.png</code>. You will need to restart the container when adding new icons.</p> <p>Note: Material Design Icons for brands were deprecated and may be removed in the future. Using Simple Icons for brand icons will prevent any issues if / when the Material Design Icons are removed.</p> <pre><code>- Group A:\n- Sonarr:\nicon: sonarr.png\nhref: http://sonarr.host/\ndescription: Series management\n- Group B:\n- Radarr:\nicon: radarr.png\nhref: http://radarr.host/\ndescription: Movie management\n- Group C:\n- Service:\nicon: mdi-flask-outline\nhref: http://service.host/\ndescription: My cool service\n</code></pre> <p></p>"},{"location":"configs/services/#ping","title":"Ping","text":"<p>Services may have an optional <code>ping</code> property that allows you to monitor the availability of an endpoint you chose and have the response time displayed. You do not need to set your ping URL equal to your href URL.</p> <p>Note: the ping feature works by making an http <code>HEAD</code> request to the URL, and falls back to <code>GET</code> in case that fails. It will not, for example, login if the URL requires auth or is behind e.g. Authelia. In the case of a reverse proxy and/or auth this usually requires the use of an 'internal' URL to make the ping feature correctly display status.</p> <pre><code>- Group A:\n- Sonarr:\nicon: sonarr.png\nhref: http://sonarr.host/\nping: http://sonarr.host/\n- Group B:\n- Radarr:\nicon: radarr.png\nhref: http://radarr.host/\nping: http://some.other.host/\n</code></pre> <p></p>"},{"location":"configs/services/#docker-integration","title":"Docker Integration","text":"<p>Services may be connected to a Docker container, either running on the local machine, or a remote machine.</p> <pre><code>- Group A:\n- Service A:\nhref: http://localhost/\ndescription: This is my service\nserver: my-server\ncontainer: my-container\n- Group B:\n- Service B:\nhref: http://localhost/\ndescription: This is another service\nserver: other-server\ncontainer: other-container\n</code></pre> <p></p> <p>Clicking on the status label of a service with Docker integration enabled will expand the container stats, where you can see CPU, Memory, and Network activity.</p> <p>Note: This can also be controlled with <code>showStats</code>. See show docker stats for more information</p> <p></p>"},{"location":"configs/services/#service-integrations","title":"Service Integrations","text":"<p>Services may also have a service widget (or integration) attached to them, this works independently of the Docker integration.</p> <p>You can find information and configuration for each of the supported integrations on the Service Widgets page.</p> <p>Here is an example of a Radarr &amp; Sonarr service, with their respective integrations.</p> <pre><code>- Group A:\n- Sonarr:\nicon: sonarr.png\nhref: http://sonarr.host/\ndescription: Series management\nwidget:\ntype: sonarr\nurl: http://sonarr.host\nkey: apikeyapikeyapikeyapikeyapikey\n- Group B:\n- Radarr:\nicon: radarr.png\nhref: http://radarr.host/\ndescription: Movie management\nwidget:\ntype: radarr\nurl: http://radarr.host\nkey: apikeyapikeyapikeyapikeyapikey\n</code></pre> <p></p>"},{"location":"configs/settings/","title":"Settings","text":"<p>The <code>settings.yaml</code> file allows you to define application level options. For changes made to this file to take effect, you will need to regenerate the static HTML, this can be done by clicking the refresh icon in the bottom right of the page.</p>"},{"location":"configs/settings/#title","title":"Title","text":"<p>You can customize the title of the page if you'd like.</p> <pre><code>title: My Awesome Homepage\n</code></pre>"},{"location":"configs/settings/#start-url","title":"Start URL","text":"<p>You can customize the start_url as required for installable apps. The default is \"/\".</p> <pre><code>startUrl: https://custom.url\n</code></pre>"},{"location":"configs/settings/#background-image","title":"Background Image","text":"<p>If you'd like to use a background image instead of the solid theme color, you may provide a full URL to an image of your choice.</p> <pre><code>background: https://images.unsplash.com/photo-1502790671504-542ad42d5189?auto=format&amp;fit=crop&amp;w=2560&amp;q=80\n</code></pre> <p>Or you may pass the path to a local image relative to e.g. <code>/app/public/images</code> directory. Note: do not create a bind mount to the entire <code>/app/public/</code> directory.</p> <p>You will need to restart the container any time you add new images, this is a limitation of the Next.js static site server.</p> <p>For example, inside of your Docker Compose file, mount a path to where your images are kept:</p> <pre><code>volumes:\n- /my/homepage/images:/app/public/images\n</code></pre> <p>and then reference that image:</p> <pre><code>background: /images/background.png\n</code></pre>"},{"location":"configs/settings/#background-opacity-filters","title":"Background Opacity &amp; Filters","text":"<p>You can specify filters to apply over your background image for blur, saturation and brightness as well as opacity to blend with the background color. The first three filter settings use tailwind CSS classes, see notes below regarding the options for each. You do not need to specify all options.</p> <pre><code>background:\nimage: /images/background.png\nblur: sm # sm, \"\", md, xl... see https://tailwindcss.com/docs/backdrop-blur\nsaturate: 50 # 0, 50, 100... see https://tailwindcss.com/docs/backdrop-saturate\nbrightness: 50 # 0, 50, 75... see https://tailwindcss.com/docs/backdrop-brightness\nopacity: 50 # 0-100\n</code></pre>"},{"location":"configs/settings/#card-background-blur","title":"Card Background Blur","text":"<p>You can apply a blur filter to the service &amp; bookmark cards. Note this option is incompatible with the backround blur, saturate and brightness filters.</p> <pre><code>cardBlur: sm # sm, \"\", md, etc... see https://tailwindcss.com/docs/backdrop-blur\n</code></pre>"},{"location":"configs/settings/#favicon","title":"Favicon","text":"<p>If you'd like to use a custom favicon instead of the included one, you may provide a full URL to an image of your choice.</p> <pre><code>favicon: https://www.google.com/favicon.ico\n</code></pre> <p>Or you may pass the path to a local image relative to the <code>/app/public</code> directory. See Background Image for more detailed information on how to provide your own files.</p>"},{"location":"configs/settings/#theme","title":"Theme","text":"<p>You can configure a fixed them (and disable the theme switcher) by passing the <code>theme</code> option, like so:</p> <pre><code>theme: dark # or light\n</code></pre>"},{"location":"configs/settings/#color-palette","title":"Color Palette","text":"<p>You can configured a fixed color palette (and disable the palette switcher) by passing the <code>color</code> option, like so:</p> <pre><code>color: slate\n</code></pre> <p>Supported colors are: <code>slate</code>, <code>gray</code>, <code>zinc</code>, <code>neutral</code>, <code>stone</code>, <code>amber</code>, <code>yellow</code>, <code>lime</code>, <code>green</code>, <code>emerald</code>, <code>teal</code>, <code>cyan</code>, <code>sky</code>, <code>blue</code>, <code>indigo</code>, <code>violet</code>, <code>purple</code>, <code>fuchsia</code>, <code>pink</code>, <code>rose</code>, <code>red</code>, <code>white</code></p>"},{"location":"configs/settings/#layout","title":"Layout","text":"<p>You can configure service and bookmarks sections to be either \"column\" or \"row\" based layouts, like so:</p> <p>Assuming you have a group named <code>Media</code> in your <code>services.yaml</code> or <code>bookmarks.yaml</code> file,</p> <pre><code>layout:\nMedia:\nstyle: row\ncolumns: 4\n</code></pre> <p>As an example, this would produce the following layout:</p> <p></p>"},{"location":"configs/settings/#sorting","title":"Sorting","text":"<p>Service groups and bookmark groups can be mixed in order, but should use different group names. If you do not specify any bookmark groups they will all show at the bottom of the page.</p> <p>Using the same name for a service and bookmark group can cause unexpected behavior like a bookmark group being hidden</p> <p>Groups will sort based on the order in the layout block. You can also mix in groups defined by docker labels, e.g.</p> <pre><code>layout:\n- Auto-Discovered1:\n- Configured1:\n- Configured2:\n- Auto-Discovered2:\n- Configured3:\nstyle: row\ncolumns: 3\n</code></pre>"},{"location":"configs/settings/#headers","title":"Headers","text":"<p>You can hide headers for each section in the layout as well by passing <code>header</code> as false, like so:</p> <pre><code>layout:\nSection A:\nheader: false\nSection B:\nstyle: row\ncolumns: 3\nheader: false\n</code></pre>"},{"location":"configs/settings/#category-icons","title":"Category Icons","text":"<p>You can also add an icon to a category under the <code>layout</code> setting similar to the options for service icons, e.g.</p> <pre><code>  Home Management &amp; Info:\nicon: home-assistant.png\nServer Tools:\nicon: https://cdn-icons-png.flaticon.com/512/252/252035.png\n...\n</code></pre>"},{"location":"configs/settings/#icon-style","title":"Icon Style","text":"<p>The default style for icons (e.g. <code>icon: mdi-XXXX</code>) is a gradient, or you can specify that prefixed icons match your theme with a 'flat' style using the setting below. More information about prefixed icons can be found in options for service icons.</p> <pre><code>iconStyle: theme # optional, defaults to gradient\n</code></pre>"},{"location":"configs/settings/#tabs","title":"Tabs","text":"<p>Version 0.6.30 introduced a tabbed view to layouts which can be optionally specified in the layout. Tabs is only active if you set the <code>tab</code> field on at least one layout group.</p> <p>Tabs are sorted based on the order in the layout block. If a group has no tab specified (and tabs are set on other groups), services and bookmarks will be shown on all tabs.</p> <p>Every tab can be accessed directly by visiting Homepage URL with <code>#Group</code> (name lowercase and URI-encoded) at the end of the URL.</p> <p>For example, the following would create four tabs:</p> <pre><code>layout:\n...\nBookmark Group on First Tab:\ntab: First\nFirst Service Group:\ntab: First\nstyle: row\ncolumns: 4\nSecond Service Group:\ntab: Second\ncolumns: 4\nThird Service Group:\ntab: Third\nstyle: row\nBookmark Group on Fourth Tab:\ntab: Fourth\nService Group on every Tab:\nstyle: row\ncolumns: 4\n</code></pre>"},{"location":"configs/settings/#five-columns","title":"Five Columns","text":"<p>You can add a fifth column (when <code>style: columns</code> which is default) by adding:</p> <pre><code>fiveColumns: true\n</code></pre> <p>By default homepage will max out at 4 columns for column style</p>"},{"location":"configs/settings/#collapsible-sections","title":"Collapsible sections","text":"<p>You can disable the collapsible feature of services &amp; bookmarks by adding:</p> <pre><code>disableCollapse: true\n</code></pre> <p>By default the feature is enabled.</p>"},{"location":"configs/settings/#header-style","title":"Header Style","text":"<p>There are currently 4 options for header styles, you can see each one below.</p> <p></p> <pre><code>headerStyle: underlined # default style\n</code></pre> <p></p> <pre><code>headerStyle: boxed\n</code></pre> <p></p> <pre><code>headerStyle: clean\n</code></pre> <p></p> <pre><code>headerStyle: boxedWidgets\n</code></pre>"},{"location":"configs/settings/#base-url","title":"Base URL","text":"<p>In some proxy configurations, it may be necessary to set the documents base URL. You can do this by providing a <code>base</code> value, like so:</p> <pre><code>base: http://host.local/homepage\n</code></pre> <p>The URL must be a full, absolute URL, or it will be ignored by the browser.</p>"},{"location":"configs/settings/#language","title":"Language","text":"<p>Set your desired language using:</p> <pre><code>language: fr\n</code></pre> <p>Currently supported languages: ca, de, en, es, fr, he, hr, hu, it, nb-NO, nl, pt, ru, sv, vi, zh-CN, zh-Hant</p> <p>You can also specify locales e.g. for the DateTime widget, e.g. en-AU, en-GB, etc.</p>"},{"location":"configs/settings/#link-target","title":"Link Target","text":"<p>Changes the behaviour of links on the homepage,</p> <pre><code>target: _blank # Possible options include _blank, _self, and _top\n</code></pre> <p>Use <code>_blank</code> to open links in a new tab, <code>_self</code> to open links in the same tab, and <code>_top</code> to open links in a new window.</p> <p>This can also be set for individual services. Note setting this at the service level overrides any setting in settings.json, e.g.:</p> <pre><code>- Example Service:\nhref: https://example.com/\n...\ntarget: _self\n</code></pre>"},{"location":"configs/settings/#providers","title":"Providers","text":"<p>The <code>providers</code> section allows you to define shared API provider options and secrets. Currently this allows you to define your weather API keys in secret and is also the location of the Longhorn URL and credentials.</p> <pre><code>providers:\nopenweathermap: openweathermapapikey\nweatherapi: weatherapiapikey\nlonghorn:\nurl: https://longhorn.example.com\nusername: admin\npassword: LonghornPassword\n</code></pre> <p>You can then pass <code>provider</code> instead of <code>apiKey</code> in your widget configuration.</p> <pre><code>- weather:\nlatitude: 50.449684\nlongitude: 30.525026\nprovider: weatherapi\n</code></pre>"},{"location":"configs/settings/#quick-launch","title":"Quick Launch","text":"<p>You can use the 'Quick Launch' feature to search services, perform a web search or open a URL. To use Quick Launch, just start typing while on your homepage (as long as the search widget doesnt have focus).</p> <p></p> <p>There are a few optional settings for the Quick Launch feature:</p> <ul> <li><code>searchDescriptions</code>: which lets you control whether item descriptions are included in searches. This is off by default. When enabled, results that match the item name will be placed above those that only match the description.</li> <li><code>hideInternetSearch</code>: disable automatically including the currently-selected web search (e.g. from the widget) as a Quick Launch option. This is false by default, enabling the feature.</li> <li><code>hideVisitURL</code>: disable detecting and offering an option to open URLs. This is false by default, enabling the feature.</li> </ul> <pre><code>quicklaunch:\nsearchDescriptions: true\nhideInternetSearch: true\nhideVisitURL: true\n</code></pre>"},{"location":"configs/settings/#homepage-version","title":"Homepage Version","text":"<p>By default the release version is displayed at the bottom of the page. To hide this, use the <code>hideVersion</code> setting, like so:</p> <pre><code>hideVersion: true\n</code></pre>"},{"location":"configs/settings/#log-path","title":"Log Path","text":"<p>By default the homepage logfile is written to the a <code>logs</code> subdirectory of the <code>config</code> folder. In order to customize this path, you can set the <code>logpath</code> setting. A <code>logs</code> folder will be created in that location where the logfile will be written.</p> <pre><code>logpath: /logfile/path\n</code></pre>"},{"location":"configs/settings/#show-docker-stats","title":"Show Docker Stats","text":"<p>You can show all docker stats expanded in <code>settings.yaml</code>:</p> <pre><code>showStats: true\n</code></pre> <p>or per-service (<code>services.yaml</code>) with:</p> <pre><code>- Example Service:\n...\nshowStats: true\n</code></pre> <p>If you have both set the per-service settings take precedence.</p>"},{"location":"configs/settings/#hide-widget-error-messages","title":"Hide Widget Error Messages","text":"<p>Hide the visible API error messages either globally in <code>settings.yaml</code>:</p> <pre><code>hideErrors: true\n</code></pre> <p>or per service widget (<code>services.yaml</code>) with:</p> <pre><code>- Example Service:\n...\nwidget:\n...\nhideErrors: true\n</code></pre> <p>If either value is set to true, the errror message will be hidden.</p>"},{"location":"installation/","title":"Installation","text":"<p>You have a few options for deploying homepage, depending on your needs. We offer docker images for a majority of platforms. You can also install and run homepage from source if Docker is not your thing. It can even be installed on Kubernetes with Helm.</p> <p>Deploy with Docker</p> <p>Deploy on Kubernetes</p> <p>Deploy on UNRAID</p> <p>Build from Source</p>"},{"location":"installation/docker/","title":"Docker Installation","text":"<p>Using docker compose:</p> <pre><code>version: \"3.3\"\nservices:\nhomepage:\nimage: ghcr.io/benphelps/homepage:latest\ncontainer_name: homepage\nports:\n- 3000:3000\nvolumes:\n- /path/to/config:/app/config # Make sure your local config directory exists\n- /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations\n</code></pre>"},{"location":"installation/docker/#running-as-non-root","title":"Running as non-root","text":"<p>By default, the Homepage container runs as root. Homepage also supports running your container as non-root via the standard <code>PUID</code> and <code>PGID</code> environment variables. When using these variables, make sure that any volumes mounted in to the container have the correct ownership and permissions set.</p> <p>Using the docker socket directly is not the recommended method of integration and requires either running homepage as root or that the user be part of the docker group</p> <p>In the docker compose example below, the environment variables <code>$PUID</code> and <code>$PGID</code> are set in a <code>.env</code> file.</p> <pre><code>version: \"3.3\"\nservices:\nhomepage:\nimage: ghcr.io/benphelps/homepage:latest\ncontainer_name: homepage\nports:\n- 3000:3000\nvolumes:\n- /path/to/config:/app/config # Make sure your local config directory exists\n- /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations, see alternative methods\nenvironment:\nPUID: $PUID\nPGID: $PGID\n</code></pre>"},{"location":"installation/docker/#with-docker-run","title":"With Docker Run","text":"<pre><code>docker run -p 3000:3000 -v /path/to/config:/app/config -v /var/run/docker.sock:/var/run/docker.sock ghcr.io/benphelps/homepage:latest\n</code></pre>"},{"location":"installation/docker/#using-environment-secrets","title":"Using Environment Secrets","text":"<p>You can also include environment variables in your config files to protect sensitive information. Note:</p> <ul> <li>Environment variables must start with <code>HOMEPAGE_VAR_</code> or <code>HOMEPAGE_FILE_</code></li> <li>The value of env var <code>HOMEPAGE_VAR_XXX</code> will replace <code>{{HOMEPAGE_VAR_XXX}}</code> in any config</li> <li>The value of env var <code>HOMEPAGE_FILE_XXX</code> must be a file path, the contents of which will be used to replace <code>{{HOMEPAGE_FILE_XXX}}</code> in any config</li> </ul>"},{"location":"installation/k8s/","title":"Kubernetes Installation","text":""},{"location":"installation/k8s/#install-with-helm","title":"Install with Helm","text":"<p>There is an unofficial helm chart that creates all the necessary manifests, including the service account and RBAC entities necessary for service discovery.</p> <pre><code>helm repo add jameswynn https://jameswynn.github.io/helm-charts\nhelm install homepage jameswynn/homepage -f values.yaml\n</code></pre> <p>The helm chart allows for all the configurations to be inlined directly in your <code>values.yaml</code>:</p> <pre><code>config:\nbookmarks:\n- Developer:\n- Github:\n- abbr: GH\nhref: https://github.com/\nservices:\n- My First Group:\n- My First Service:\nhref: http://localhost/\ndescription: Homepage is awesome\n- My Second Group:\n- My Second Service:\nhref: http://localhost/\ndescription: Homepage is the best\n- My Third Group:\n- My Third Service:\nhref: http://localhost/\ndescription: Homepage is \ud83d\ude0e\nwidgets:\n# show the kubernetes widget, with the cluster summary and individual nodes\n- kubernetes:\ncluster:\nshow: true\ncpu: true\nmemory: true\nshowLabel: true\nlabel: \"cluster\"\nnodes:\nshow: true\ncpu: true\nmemory: true\nshowLabel: true\n- search:\nprovider: duckduckgo\ntarget: _blank\nkubernetes:\nmode: cluster\nsettings:\n# The service account is necessary to allow discovery of other services\nserviceAccount:\ncreate: true\nname: homepage\n# This enables the service account to access the necessary resources\nenableRbac: true\ningress:\nmain:\nenabled: true\nannotations:\n# Example annotations to add Homepage to your Homepage!\ngethomepage.dev/enabled: \"true\"\ngethomepage.dev/name: \"Homepage\"\ngethomepage.dev/description: \"Dynamically Detected Homepage\"\ngethomepage.dev/group: \"Dynamic\"\ngethomepage.dev/icon: \"homepage.png\"\nhosts:\n- host: homepage.example.com\npaths:\n- path: /\npathType: Prefix\n</code></pre>"},{"location":"installation/k8s/#install-with-kubernetes-manifests","title":"Install with Kubernetes Manifests","text":"<p>If you don't want to use the unofficial Helm chart, you can also create your own Kubernetes manifest(s) and apply them with <code>kubectl apply -f filename.yaml</code>.</p> <p>Here's a working example of the resources you need:</p>"},{"location":"installation/k8s/#serviceaccount","title":"ServiceAccount","text":"<pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\nname: homepage\nnamespace: default\nlabels:\napp.kubernetes.io/name: homepage\nsecrets:\n- name: homepage\n</code></pre>"},{"location":"installation/k8s/#secret","title":"Secret","text":"<pre><code>apiVersion: v1\nkind: Secret\ntype: kubernetes.io/service-account-token\nmetadata:\nname: homepage\nnamespace: default\nlabels:\napp.kubernetes.io/name: homepage\nannotations:\nkubernetes.io/service-account.name: homepage\n</code></pre>"},{"location":"installation/k8s/#configmap","title":"ConfigMap","text":"<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\nname: homepage\nnamespace: default\nlabels:\napp.kubernetes.io/name: homepage\ndata:\nkubernetes.yaml: |\nmode: cluster\nsettings.yaml: \"\"\n#settings.yaml: |\n#  providers:\n#    longhorn:\n#      url: https://longhorn.my.network\ncustom.css: \"\"\ncustom.js: \"\"\nbookmarks.yaml: |\n- Developer:\n- Github:\n- abbr: GH\nhref: https://github.com/\nservices.yaml: |\n- My First Group:\n- My First Service:\nhref: http://localhost/\ndescription: Homepage is awesome\n- My Second Group:\n- My Second Service:\nhref: http://localhost/\ndescription: Homepage is the best\n- My Third Group:\n- My Third Service:\nhref: http://localhost/\ndescription: Homepage is \ud83d\ude0e\nwidgets.yaml: |\n- kubernetes:\ncluster:\nshow: true\ncpu: true\nmemory: true\nshowLabel: true\nlabel: \"cluster\"\nnodes:\nshow: true\ncpu: true\nmemory: true\nshowLabel: true\n- resources:\nbackend: resources\nexpanded: true\ncpu: true\nmemory: true\n- search:\nprovider: duckduckgo\ntarget: _blank\ndocker.yaml: \"\"\n</code></pre>"},{"location":"installation/k8s/#clusterrole-and-clusterrolebinding","title":"ClusterRole and ClusterRoleBinding","text":"<pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\nname: homepage\nlabels:\napp.kubernetes.io/name: homepage\nrules:\n- apiGroups:\n- \"\"\nresources:\n- namespaces\n- pods\n- nodes\nverbs:\n- get\n- list\n- apiGroups:\n- extensions\n- networking.k8s.io\nresources:\n- ingresses\nverbs:\n- get\n- list\n- apiGroups:\n- traefik.containo.us\nresources:\n- ingressroutes\nverbs:\n- get\n- list\n- apiGroups:\n- metrics.k8s.io\nresources:\n- nodes\n- pods\nverbs:\n- get\n- list\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\nname: homepage\nlabels:\napp.kubernetes.io/name: homepage\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: homepage\nsubjects:\n- kind: ServiceAccount\nname: homepage\nnamespace: default\n</code></pre>"},{"location":"installation/k8s/#service","title":"Service","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\nname: homepage\nnamespace: default\nlabels:\napp.kubernetes.io/name: homepage\nannotations:\nspec:\ntype: ClusterIP\nports:\n- port: 3000\ntargetPort: http\nprotocol: TCP\nname: http\nselector:\napp.kubernetes.io/name: homepage\n</code></pre>"},{"location":"installation/k8s/#deployment","title":"Deployment","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: homepage\nnamespace: default\nlabels:\napp.kubernetes.io/name: homepage\nspec:\nrevisionHistoryLimit: 3\nreplicas: 1\nstrategy:\ntype: RollingUpdate\nselector:\nmatchLabels:\napp.kubernetes.io/name: homepage\ntemplate:\nmetadata:\nlabels:\napp.kubernetes.io/name: homepage\nspec:\nserviceAccountName: homepage\nautomountServiceAccountToken: true\ndnsPolicy: ClusterFirst\nenableServiceLinks: true\ncontainers:\n- name: homepage\nimage: \"ghcr.io/benphelps/homepage:latest\"\nimagePullPolicy: Always\nports:\n- name: http\ncontainerPort: 3000\nprotocol: TCP\nvolumeMounts:\n- name: homepage-config\nmountPath: /app/config\n- name: logs\nmountPath: /app/config/logs\nvolumes:\n- name: homepage-config\nconfigMap:\nname: homepage\n- name: logs\nemptyDir: {}\n</code></pre>"},{"location":"installation/k8s/#ingress","title":"Ingress","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\nname: homepage\nnamespace: default\nlabels:\napp.kubernetes.io/name: homepage\nannotations:\ngethomepage.dev/description: Dynamically Detected Homepage\ngethomepage.dev/enabled: \"true\"\ngethomepage.dev/group: Cluster Management\ngethomepage.dev/icon: homepage.png\ngethomepage.dev/name: Homepage\nspec:\nrules:\n- host: \"homepage.my.network\"\nhttp:\npaths:\n- path: \"/\"\npathType: Prefix\nbackend:\nservice:\nname: homepage\nport:\nnumber: 3000\n</code></pre>"},{"location":"installation/source/","title":"Source Installation","text":"<p>First, clone the repository:</p> <pre><code>git clone https://github.com/benphelps/homepage.git\n</code></pre> <p>Then install dependencies and build the production bundle (I'm using pnpm here, you can use npm or yarn if you like):</p> <pre><code>pnpm install\npnpm build\n</code></pre> <p>If this is your first time starting, copy the <code>src/skeleton</code> directory to <code>config/</code> to populate initial example config files.</p> <p>Finally, run the server:</p> <pre><code>pnpm start\n</code></pre>"},{"location":"installation/unraid/","title":"UNRAID Installation","text":"<p>Homepage has an UNRAID community package that you may use to install homepage. This is the easiest way to get started with homepage on UNRAID.</p>"},{"location":"installation/unraid/#install-the-plugin","title":"Install the Plugin","text":"<ul> <li>In the UNRAID webGUI, go to the Apps tab.</li> <li>In the search bar, search for <code>homepage</code>.</li> <li>Click on Install.</li> <li>Change the parameters to your liking.<ul> <li>Click on APPLY.</li> </ul> </li> </ul>"},{"location":"installation/unraid/#run-the-container","title":"Run the Container","text":"<ul> <li>While the container is running, open the WebUI.<ul> <li>Opening the page will generate the configuration files.</li> </ul> </li> </ul> <p>You may need to set the permissions of the folders to be able to edit the files.</p> <ul> <li>Click on the Homepage icon.</li> <li>Click on Console.<ul> <li>Enter <code>chmod -R u-x,go-rwx,go+u,ugo+X /app/config</code> and press Enter.</li> <li>Enter <code>chmod -R u-x,go-rwx,go+u,ugo+X /app/public/icons</code> and press Enter.</li> <li>Enter <code>chown -R nobody:users /app/config</code> and press Enter.</li> <li>Enter <code>chown -R nobody:users /app/public/icons</code> and press Enter.</li> </ul> </li> </ul>"},{"location":"installation/unraid/#some-other-notes","title":"Some Other Notes","text":"<ul> <li> <p>To use the Docker integration, you only need to use the <code>container:</code> parameter. There is no need to set the server.</p> <p>Note: To view detailed container statistics (CPU, RAM, etc.), or if you use a remote docker socket, <code>container:</code> will still need to be set.</p> <ul> <li> <p>Example:</p> <pre><code>  - Plex:\n  icon: /icons/plex.png\n  href: https://app.plex.com\n  container: plex\n</code></pre> </li> </ul> </li> <li> <p>When you upload a new image into the /images folder, you will need to restart the container for it to show up in the WebUI. Please see the service icons for more information.</p> </li> </ul>"},{"location":"more/development/","title":"Development","text":""},{"location":"more/development/#development-overview","title":"Development Overview","text":"<p>First, clone the homepage repository.</p> <p>For installing NPM packages, this project uses pnpm (and so should you!):</p> <pre><code>pnpm install\n</code></pre> <p>Start the development server:</p> <pre><code>pnpm dev\n</code></pre> <p>Open http://localhost:3000 to start.</p> <p>This is a Next.js application, see their documentation for more information.</p>"},{"location":"more/development/#code-linting","title":"Code Linting","text":"<p>Once dependencies have been installed you can lint your code with</p> <pre><code>pnpm lint\n</code></pre>"},{"location":"more/development/#service-widget-guidelines","title":"Service Widget Guidelines","text":"<p>To ensure cohesiveness of various widgets, the following should be used as a guide for developing new widgets:</p> <ul> <li>Please only submit widgets that have been requested and have at least 5 'up-votes'</li> <li>Widgets should be only one row of blocks</li> <li>Widgets should be no more than 4 blocks wide</li> <li>Minimize the number of API calls</li> <li>Avoid the use of custom proxy unless absolutely necessary</li> </ul>"},{"location":"more/translations/","title":"Translations","text":"<p>Homepage is developed in English, most other supported languages are provided via Google Translate. When a i18n key is not found, the fallback language is English.</p>"},{"location":"more/translations/#support-translations","title":"Support Translations","text":"<p>If you'd like to lend a hand in translating Homepage into more languages, or to improve existing translations, the process is very simple.</p> <p>Everything can be done from a simple to use web interface here: https://hosted.weblate.org/projects/homepage/homepage/</p> <p>When creating a new language, it can take 5 to 10 minutes before you'll see translatable strings added, but the process is automatic. Once the strings are added, you can then start translating them.</p>"},{"location":"more/troubleshooting/","title":"Troubleshooting","text":""},{"location":"more/troubleshooting/#general-troubleshooting-tips","title":"General Troubleshooting Tips","text":"<ul> <li>For API errors, clicking the \"API Error Information\" button in the widget will usually show some helpful information as to whether the issue is reaching the service host, an authentication issue, etc.</li> <li>Check config/logs/homepage.log, on docker simply e.g. <code>docker logs homepage</code>. This may provide some insight into the reason for an error.</li> <li>Check the browser error console, this can also sometimes provide useful information.</li> <li>Consider setting the <code>ENV</code> variable <code>LOG_LEVEL</code> to <code>debug</code>.</li> </ul>"},{"location":"more/troubleshooting/#service-widget-errors","title":"Service Widget Errors","text":"<p>All service widgets work essentially the same, that is, homepage makes a proxied call to an API made available by that service. The majority of the time widgets don't work it is a configuration issue. Of course, sometimes things do break. Some basic steps to try:</p> <ol> <li> <p>Ensure that you follow the rule mentioned on https://gethomepage.dev/en/configs/service-widgets/. Unless otherwise noted, URLs should not end with a / or other API path. Each widget will handle the path on its own.. This is very important as including a trailing slash can result in an error.</p> </li> <li> <p>Verify the homepage installation can connect to the IP address or host you are using for the widget <code>url</code>. This is most simply achieved by pinging the server from the homepage machine, in Docker this means from inside the container itself, e.g.:</p> <pre><code>docker exec homepage ping SERVICEIPORDOMAIN\n</code></pre> <p>If your homepage install (container) cannot reach the service then you need to figure out why, for example in Docker this can mean putting the two containers on the same network, checking firewall issues, etc.</p> </li> <li> <p>If you have verified that homepage can in fact reach the service then you can also check the API output using e.g. <code>curl</code>, which is often helpful if you do need to file a bug report. Again, depending on your networking setup this may need to be run from inside the container as IP / hostname resolution can differ inside vs outside.</p> <p>Note: <code>curl</code> is not installed in the base image by default but can be added inside the container with <code>apk add curl</code>.</p> <p>The exact API endpoints and authentication vary of course, but in many cases instructions can be found by searching the web or if you feel comfortable looking at the homepage source code (e.g. <code>src/widgets/{widget}/widget.js</code>).</p> <p>It is out of the scope of this to go into full detail about how to , but an example for PiHole would be:</p> <pre><code>curl -L -k http://PIHOLEIPORHOST/admin/api.php\n</code></pre> <p>Or for AdGuard:</p> <pre><code>curl -L -k -u 'username:password' http://ADGUARDIPORHOST/control/stats\n</code></pre> <p>Or for Portainer:</p> <pre><code>curl -L -k -H 'X-Api-Key:YOURKEY' 'https://PORTAINERIPORHOST:PORT/api/endpoints/2/docker/containers/json'\n</code></pre> <p>Sonarr:</p> <pre><code>curl -L -k 'http://SONARRIPORHOST:PORT/api/v3/queue?apikey=YOURAPIKEY'\n</code></pre> <p>This will return some data which may reveal an issue causing a true bug in the service widget.</p> </li> </ol>"},{"location":"more/troubleshooting/#missing-custom-icons","title":"Missing custom icons","text":"<p>If, after correctly adding and mapping your custom icons via the Icons instructions, you are still unable to see your icons please try recreating your container.</p>"},{"location":"services/adguard-home/","title":"Adguard Home","text":"<p>The username and password are the same as used to login to the web interface.</p> <p>Allowed fields: <code>[\"queries\", \"blocked\", \"filtered\", \"latency\"]</code>.</p> <pre><code>widget:\ntype: adguard\nurl: http://adguard.host.or.ip\nusername: admin\npassword: password\n</code></pre>"},{"location":"services/audiobookshelf/","title":"Audiobookshelf","text":"<p>You can find your API token by logging into the Audiobookshelf web app as an admin, go to the config \u2192 users page, and click on your account.</p> <p>Allowed fields: <code>[\"podcasts\", \"podcastsDuration\", \"books\", \"booksDuration\"]</code></p> <pre><code>widget:\ntype: audiobookshelf\nurl: http://audiobookshelf.host.or.ip:port\nkey: audiobookshelflapikey\n</code></pre>"},{"location":"services/authentik/","title":"Authentik","text":"<p>This widget reads the number of active users in the system, as well as logins for the last 24 hours.</p> <p>You will need to generate an API token for an existing user. To do so follow these steps:</p> <ol> <li>Navigate to the Authentik Admin Portal</li> <li>Expand Directory, the click Tokens &amp; App passwords</li> <li>Click the Create button</li> <li>Fill out the dialog making sure to set Intent to API Token</li> <li>Click the Create button on the dialog</li> <li>Click the copy button on the far right of the newly created API Token</li> </ol> <p>Allowed fields: <code>[\"users\", \"loginsLast24H\", \"failedLoginsLast24H\"]</code>.</p> <pre><code>widget:\ntype: authentik\nurl: http://authentik.host.or.ip:22070\nkey: api_token\n</code></pre>"},{"location":"services/autobrr/","title":"Autobrr","text":"<p>Find your API key under <code>Settings &gt; API Keys</code>.</p> <p>Allowed fields: <code>[\"approvedPushes\", \"rejectedPushes\", \"filters\", \"indexers\"]</code>.</p> <pre><code>widget:\ntype: autobrr\nurl: http://autobrr.host.or.ip\nkey: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"services/bazarr/","title":"Bazarr","text":"<p>Find your API key under <code>Settings &gt; General</code>.</p> <p>Allowed fields: <code>[\"missingEpisodes\", \"missingMovies\"]</code>.</p> <pre><code>widget:\ntype: bazarr\nurl: http://bazarr.host.or.ip\nkey: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"services/caddy/","title":"Caddy","text":"<p>Allowed fields: <code>[\"upstreams\", \"requests\", \"requests_failed\"]</code>.</p> <pre><code>widget:\ntype: caddy\nurl: http://caddy.host.or.ip:adminport # default admin port is 2019\n</code></pre>"},{"location":"services/changedetectionio/","title":"Changedetection.io","text":"<p>Find your API key under <code>Settings &gt; API</code>.</p> <pre><code>widget:\ntype: changedetectionio\nurl: http://changedetection.host.or.ip:port\nkey: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"services/channelsdvrserver/","title":"Channels DVR Server","text":"<pre><code>widget:\ntype: channelsdvrserver\nurl: http://192.168.1.55:8089\n</code></pre>"},{"location":"services/coin-market-cap/","title":"Coin Market Cap","text":"<p>Get your API key from your CoinMarketCap Pro Dashboard.</p> <p>Allowed fields: no configurable fields for this widget.</p> <pre><code>widget:\ntype: coinmarketcap\ncurrency: GBP # Optional\nsymbols: [BTC, LTC, ETH]\nkey: apikeyapikeyapikeyapikeyapikey\n</code></pre> <p>You can also specify slugs instead of symbols (since symbols aren't garaunteed to be unique). If you supply both, slugs will be used. For example:</p> <pre><code>widget:\ntype: coinmarketcap\nslugs: [chia-network, uniswap]\nkey: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"services/deluge/","title":"Deluge","text":"<p>Uses the same password used to login to the webui, see the deluge FAQ.</p> <p>Allowed fields: <code>[\"leech\", \"download\", \"seed\", \"upload\"]</code>.</p> <pre><code>widget:\ntype: deluge\nurl: http://deluge.host.or.ip\npassword: password # webui password\n</code></pre>"},{"location":"services/downloadstation/","title":"Synology Download Station","text":"<p>Note: the widget is not compatible with 2FA.</p> <p>Allowed fields: <code>[\"leech\", \"download\", \"seed\", \"upload\"]</code>.</p> <pre><code>widget:\ntype: downloadstation\nurl: http://downloadstation.host.or.ip:port\nusername: username\npassword: password\n</code></pre>"},{"location":"services/emby/","title":"Emby","text":"<p>You can create an API key from inside Emby at <code>Settings &gt; Advanced &gt; Api Keys</code>.</p> <p>As of v0.6.11 the widget supports fields <code>[\"movies\", \"series\", \"episodes\", \"songs\"]</code>. These blocks are disabled by default but can be enabled with the <code>enableBlocks</code> option, and the \"Now Playing\" feature (enabled by default) can be disabled with the <code>enableNowPlaying</code> option.</p> <pre><code>widget:\ntype: emby\nurl: http://emby.host.or.ip\nkey: apikeyapikeyapikeyapikeyapikey\nenableBlocks: true # optional, defaults to false\nenableNowPlaying: true # optional, defaults to true\n</code></pre>"},{"location":"services/evcc/","title":"EVCC","text":"<p>Allowed fields: <code>[\"pv_power\", \"grid_power\", \"home_power\", \"charge_power]</code>.</p> <pre><code>widget:\ntype: evcc\nurl: http://evcc.host.or.ip:port\n</code></pre>"},{"location":"services/flood/","title":"Flood","text":"<p>Allowed fields: <code>[\"leech\", \"download\", \"seed\", \"upload\"]</code>.</p> <pre><code>widget:\ntype: flood\nurl: http://flood.host.or.ip\nusername: username # if set\npassword: password # if set\n</code></pre>"},{"location":"services/freshrss/","title":"FreshRSS","text":"<p>Please refer to Enable the API in FreshRSS for the \"API password\" to be entered in the password field.</p> <p>Allowed fields: <code>[\"subscriptions\", \"unread\"]</code>.</p> <pre><code>widget:\ntype: freshrss\nurl: http://freshrss.host.or.ip:port\nusername: username\npassword: password\n</code></pre>"},{"location":"services/gamedig/","title":"GameDig","text":"<p>Uses the GameDig library to get game server information for any supported server type.</p> <p>Allowed fields (limited to a max of 4): <code>[\"status\", \"name\", \"map\", \"currentPlayers\", \"players\", \"maxPlayers\", \"bots\", \"ping\"]</code>.</p> <pre><code>widget:\ntype: gamedig\nserverType: csgo # see https://github.com/gamedig/node-gamedig#games-list\nurl: udp://server.host.or.ip:port\n</code></pre>"},{"location":"services/ghostfolio/","title":"Ghostfolio","text":"<p>Authentication requires manually obtaining a Bearer token which can be obtained by make a POST request to the API e.g.</p> <pre><code>curl -X POST http://localhost:3333/api/v1/auth/anonymous -H 'Content-Type: application/json' -d '{ \"accessToken\": \"SECURITY_TOKEN_OF_ACCOUNT\" }'\n</code></pre> <p>See the official docs.</p> <p>Note that the Bearer token is valid for 6 months, after which a new one must be generated.</p> <p>Allowed fields: <code>[\"gross_percent_today\", \"gross_percent_1y\", \"gross_percent_max\"]</code></p> <pre><code>widget:\ntype: ghostfolio\nurl: http://ghostfoliohost:port\nkey: ghostfoliobearertoken\n</code></pre>"},{"location":"services/gluetun/","title":"Gluetun","text":"<p>Requires HTTP control server options to be enabled.</p> <p>Allowed fields: <code>[\"public_ip\", \"region\", \"country\"]</code>.</p> <pre><code>widget:\ntype: gluetun\nurl: http://gluetun.host.or.ip\n</code></pre>"},{"location":"services/gotify/","title":"Gotify","text":"<p>Get a Gotify client token from an existing client or create a new one on your Gotify admin page.</p> <p>Allowed fields: <code>[\"apps\", \"clients\", \"messages\"]</code>.</p> <pre><code>widget:\ntype: gotify\nurl: http://gotify.host.or.ip\nkey: clientoken\n</code></pre>"},{"location":"services/healthchecks/","title":"Health checks","text":"<p>To use the Health Checks widget, you first need to generate an API key. To do this, follow these steps:</p> <ol> <li>Go to Settings in your check dashboard.</li> <li>Click on API key (read-only) and then click Create.</li> <li>Copy the API key that is generated for you.</li> </ol> <p>Allowed fields: <code>[\"status\", \"last_ping\"]</code>.</p> <pre><code>widget:\ntype: healthchecks\nurl: http://healthchecks.host.or.ip:port\nkey: &lt;YOUR_API_KEY&gt;\nuuid: &lt;YOUR_CHECK_UUID&gt;\n</code></pre>"},{"location":"services/homeassistant/","title":"Home Assistant","text":"<p>You will need to generate a long-lived access token for an existing Home Assistant user in its profile.</p> <p>Allowed fields: <code>[\"people_home\", \"lights_on\", \"switches_on\"]</code>.</p> <p>Up to a maximum of four custom states and/or templates can be queried via the <code>custom</code> property like in the example below. The <code>custom</code> property will have no effect as long as the <code>fields</code> property is defined.</p> <ul> <li><code>state</code> will query the state of the specified <code>entity_id</code><ul> <li>state labels and values can be user defined and may reference entity attributes in curly brackets</li> <li>if no state label is defined it will default to <code>\"{attributes.friendly_name}\"</code></li> <li>if no state value is defined it will default to <code>\"{state} {attributes.unit_of_measurement}\"</code></li> </ul> </li> <li><code>template</code> will query the specified template, see (Home Assistant Templating)[https://www.home-assistant.io/docs/configuration/templating]<ul> <li>if no template label is defined it will be empty</li> </ul> </li> </ul> <pre><code>widget:\ntype: homeassistant\nurl: http://homeassistant.host.or.ip:port\nkey: access_token\ncustom:\n- state: sensor.total_power\n- state: sensor.total_energy_today\nlabel: energy today\n- template: \"{{ states.switch|selectattr('state','equalto','on')|list|length }}\"\nlabel: switches on\n- state: weather.forecast_home\nlabel: wind speed\nvalue: \"{attributes.wind_speed} {attributes.wind_speed_unit}\"\n</code></pre>"},{"location":"services/homebridge/","title":"Homebridge","text":"<p>The Homebridge API is actually provided by the Config UI X plugin that has been included with Homebridge for a while, still it is required to be installed for this widget to work.</p> <p>Allowed fields: <code>[\"updates\", \"child_bridges\"]</code>.</p> <pre><code>widget:\ntype: homebridge\nurl: http://homebridge.host.or.ip:port\nusername: username\npassword: password\n</code></pre>"},{"location":"services/jackett/","title":"Jackett","text":"<p>Jackett must not have any authentication for the widget to work.</p> <p>Allowed fields: <code>[\"configured\", \"errored\"]</code>.</p> <pre><code>widget:\ntype: jackett\nurl: http://jackett.host.or.ip\n</code></pre>"},{"location":"services/jdownloader/","title":"JDownloader","text":"<p>Basic widget to show number of items in download queue, along with the queue size and current download speed.</p> <p>Allowed fields: <code>[\"downloadCount\", \"downloadTotalBytes\",\"downloadBytesRemaining\", \"downloadSpeed\"]</code>.</p> <pre><code>widget:\ntype: jdownloader\nusername: JDownloader Username\npassword: JDownloader Password\nclient: Name of JDownloader Instance\n</code></pre>"},{"location":"services/jellyfin/","title":"Jellyfin","text":"<p>You can create an API key from inside Jellyfin at <code>Settings &gt; Advanced &gt; Api Keys</code>.</p> <p>As of v0.6.11 the widget supports fields <code>[\"movies\", \"series\", \"episodes\", \"songs\"]</code>. These blocks are disabled by default but can be enabled with the <code>enableBlocks</code> option, and the \"Now Playing\" feature (enabled by default) can be disabled with the <code>enableNowPlaying</code> option.</p> <pre><code>widget:\ntype: jellyfin\nurl: http://jellyfin.host.or.ip\nkey: apikeyapikeyapikeyapikeyapikey\nenableBlocks: true # optional, defaults to false\nenableNowPlaying: true # optional, defaults to true\n</code></pre>"},{"location":"services/jellyseerr/","title":"Jellyseerr","text":"<p>Find your API key under <code>Settings &gt; General &gt; API Key</code>.</p> <p>Allowed fields: <code>[\"pending\", \"approved\", \"available\"]</code>.</p> <pre><code>widget:\ntype: jellyseerr\nurl: http://jellyseerr.host.or.ip\nkey: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"services/kavita/","title":"Kavita","text":"<p>Uses the same username and password used to login from the web.</p> <p>Allowed fields: <code>[\"seriesCount\", \"totalFiles\"]</code>.</p> <pre><code>widget:\ntype: kavita\nurl: http://kavita.host.or.ip:port\nusername: username\npassword: password\n</code></pre>"},{"location":"services/lidarr/","title":"Lidarr","text":"<p>Find your API key under <code>Settings &gt; General</code>.</p> <p>Allowed fields: <code>[\"wanted\", \"queued\", \"artists\"]</code>.</p> <pre><code>widget:\ntype: lidarr\nurl: http://lidarr.host.or.ip\nkey: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"services/mastodon/","title":"Mastodon","text":"<p>Use the base URL of the Mastodon instance you'd like to pull stats for. Does not require authentication as the stats are part of the public API endpoints.</p> <p>Allowed fields: <code>[\"user_count\", \"status_count\", \"domain_count\"]</code>.</p> <pre><code>widget:\ntype: mastodon\nurl: https://mastodon.host.name\n</code></pre>"},{"location":"services/medusa/","title":"Medusa","text":"<p>Allowed fields: <code>[\"wanted\", \"queued\", \"series\"]</code>.</p> <pre><code>widget:\ntype: medusa\nurl: http://medusa.host.or.ip:port\nkey: medusaapikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"services/mikrotik/","title":"Mikrotik","text":"<p>HTTPS may be required, per the documentation</p> <p>Allowed fields: <code>[\"uptime\", \"cpuLoad\", \"memoryUsed\", \"numberOfLeases\"]</code>.</p> <pre><code>widget:\ntype: mikrotik\nurl: https://mikrotik.host.or.ip\nusername: username\npassword: password\n</code></pre>"},{"location":"services/minecraft/","title":"Minecraft","text":"<p>Allowed fields: <code>[\"players\", \"version\", \"status\"]</code>.</p> <pre><code>widget:\ntype: minecraft\nurl: udp://minecraftserveripordomain:port\n</code></pre>"},{"location":"services/miniflux/","title":"Miniflux","text":"<p>Api key is found under Settings &gt; API keys</p> <p>Allowed fields: <code>[\"unread\", \"read\"]</code>.</p> <pre><code>widget:\ntype: miniflux\nurl: http://miniflux.host.or.ip:port\nkey: minifluxapikey\n</code></pre>"},{"location":"services/mjpeg/","title":"MJPEG","text":"<p>Pass the stream URL from a service like \u00b5Streamer or camera-streamer.</p> <pre><code>widget:\ntype: mjpeg\nstream: http://mjpeg.host.or.ip/webcam/stream\n</code></pre>"},{"location":"services/moonraker/","title":"Moonraker (Klipper)","text":"<p>Allowed fields: <code>[\"printer_state\", \"print_status\", \"print_progress\", \"layers\"]</code>.</p> <pre><code>widget:\ntype: moonraker\nurl: http://moonraker.host.or.ip:port\n</code></pre>"},{"location":"services/navidrome/","title":"Navidrome","text":"<p>For detailed information about how to generate the token see http://www.subsonic.org/pages/api.jsp.</p> <p>Allowed fields: no configurable fields for this widget.</p> <pre><code>widget:\ntype: navidrome\nurl: http://navidrome.host.or.ip:port\nuser: username\ntoken: token #md5(password + salt)\nsalt: randomsalt\n</code></pre>"},{"location":"services/nextdns/","title":"NextDNS","text":"<p>Api key is found under Account &gt; API, profile ID is found under Setup &gt; Endpoints &gt; ID</p> <pre><code>widget:\ntype: nextdns\nprofile: profileid\nkey: yourapikeyhere\n</code></pre>"},{"location":"services/nginx-proxy-manager/","title":"Nginx Proxy Manager","text":"<p>Login with the same admin username and password used to access the web UI.</p> <p>Allowed fields: <code>[\"enabled\", \"disabled\", \"total\"]</code>.</p> <pre><code>widget:\ntype: npm\nurl: http://npm.host.or.ip\nusername: admin_username\npassword: admin_password\n</code></pre>"},{"location":"services/nzbget/","title":"NZBget","text":"<p>This widget uses the same authentication method as your browser when logging in (HTTP Basic Auth), and is often referred to as the ControlUsername and ControlPassword inside of Nzbget documentation.</p> <p>Allowed fields: <code>[\"rate\", \"remaining\", \"downloaded\"]</code>.</p> <pre><code>widget:\ntype: nzbget\nurl: http://nzbget.host.or.ip\nusername: controlusername\npassword: controlpassword\n</code></pre>"},{"location":"services/octoprint/","title":"OctoPrint","text":"<p>Allowed fields: <code>[\"printer_state\", \"temp_tool\", \"temp_bed\", \"job_completion\"]</code>.</p> <pre><code>widget:\ntype: octoprint\nurl: http://octoprint.host.or.ip:port\nkey: youroctoprintapikey\n</code></pre>"},{"location":"services/omada/","title":"Omada","text":"<p>The widget supports controller versions 3, 4 and 5.</p> <p>Allowed fields: <code>[\"connectedAp\", \"activeUser\", \"alerts\", \"connectedGateways\", \"connectedSwitches\"]</code>.</p> <pre><code>widget:\ntype: omada\nurl: http://omada.host.or.ip:port\nusername: username\npassword: password\nsite: sitename\n</code></pre>"},{"location":"services/ombi/","title":"Ombi","text":"<p>Find your API key under <code>Settings &gt; Configuration &gt; General</code>.</p> <p>Allowed fields: <code>[\"pending\", \"approved\", \"available\"]</code>.</p> <pre><code>widget:\ntype: ombi\nurl: http://ombi.host.or.ip\nkey: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"services/openmediavault/","title":"OpenMediaVault","text":"<p>Provides useful information from your OpenMediaVault</p> <pre><code>widget:\ntype: openmediavault\nurl: http://omv.host.or.ip\nusername: admin\npassword: pass\nmethod: services.getStatus # required\n</code></pre>"},{"location":"services/openmediavault/#methods","title":"Methods","text":"<p>The method field determines the type of data to be displayed and is required. Supported methods:</p> <p><code>services.getStatus</code>: Shows status of running services. Allowed fields: <code>[\"running\", \"stopped\", \"total\"]</code></p> <p><code>smart.getListBg</code>: Shows S.M.A.R.T. status from disks. Allowed fields: <code>[\"passed\", \"failed\"]</code></p> <p><code>downloader.getDownloadList</code>: Displays the number of tasks from the Downloader plugin currently being downloaded and total. Allowed fields: <code>[\"downloading\", \"total\"]</code></p>"},{"location":"services/opnsense/","title":"OPNSense","text":"<p>The API key &amp; secret can be generated via the webui by creating a new user at System/Access/Users. Ensure \"Generate a scrambled password to prevent local database logins for this user\" is checked and then edit the effective privileges selecting only:</p> <ul> <li>Diagnostics: System Activity</li> <li>Status: Traffic Graph</li> </ul> <p>Finally, create a new API key which will download an <code>apikey.txt</code> file with your key and secret in it. Use the values as the username and password fields, respectively, in your homepage config.</p> <p>Allowed fields: <code>[\"cpu\", \"memory\", \"wanUpload\", \"wanDownload\"]</code>.</p> <pre><code>widget:\ntype: opnsense\nurl: http://opnsense.host.or.ip\nusername: key\npassword: secret\n</code></pre>"},{"location":"services/overseerr/","title":"Overseerr","text":"<p>Find your API key under <code>Settings &gt; General</code>.</p> <p>Allowed fields: <code>[\"pending\", \"approved\", \"available\", \"processing\"]</code>.</p> <pre><code>widget:\ntype: overseerr\nurl: http://overseerr.host.or.ip\nkey: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"services/paperlessngx/","title":"Paperless-ngx","text":"<p>Use username &amp; password, or the token key. Information about the token can be found in the Paperless-ngx API documentation. If both are provided, the token will be used.</p> <p>Allowed fields: <code>[\"total\", \"inbox\"]</code>.</p> <pre><code>widget:\ntype: paperlessngx\nurl: http://paperlessngx.host.or.ip:port\nusername: username\npassword: password\n</code></pre> <pre><code>widget:\ntype: paperlessngx\nurl: http://paperlessngx.host.or.ip:port\nkey: token\n</code></pre>"},{"location":"services/pfsense/","title":"pfSense","text":"<p>This widget requires the installation of the pfsense-api which is a 3rd party package for pfSense routers.</p> <p>Once pfSense API is installed, you can set the API to be read-only in System &gt; API &gt; Settings.</p> <p>Currently the only supported authentication mode is 'Local Database'.</p> <p>WAN interface to monitor can be defined by updating the <code>wan</code> param.</p> <p>Load is returned instead of cpu utilization. This is a limitation in the pfSense API due to the complexity of this calculation. This may become available in future versions.</p> <p>Allowed fields: <code>[\"load\", \"memory\", \"temp\", \"wanStatus\", \"wanIP\", \"disk\"]</code> (maximum of 4)</p> <pre><code>widget:\ntype: pfsense\nurl: http://pfsense.host.or.ip:port\nusername: user\npassword: pass\nwan: igb0\n</code></pre>"},{"location":"services/pialert/","title":"PiAlert","text":"<p>Widget for PiAlert.</p> <p>Allowed fields: <code>[\"total\", \"connected\", \"new_devices\", \"down_alerts\"]</code>.</p> <pre><code>widget:\ntype: pialert\nurl: http://ip:port\n</code></pre>"},{"location":"services/pihole/","title":"PiHole","text":"<p>As of v2022.12 PiHole requires the use of an API key if an admin password is set. Older versions do not require any authentication even if the admin uses a password.</p> <p>Allowed fields: <code>[\"queries\", \"blocked\", \"blocked_percent\", \"gravity\"]</code>.</p> <pre><code>widget:\ntype: pihole\nurl: http://pi.hole.or.ip\nkey: yourpiholeapikey # optional\n</code></pre> <p>Added in v0.1.0, udpated in v0.6.18</p>"},{"location":"services/plex-tautulli/","title":"Tautulli (Plex)","text":"<p>Provides detailed information about currently active streams. You can find the API key from inside Tautulli at <code>Settings &gt; Web Interface &gt; API</code>.</p> <p>Allowed fields: no configurable fields for this widget.</p> <pre><code>widget:\ntype: tautulli\nurl: http://tautulli.host.or.ip\nkey: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"services/plex/","title":"Plex","text":"<p>The core Plex API is somewhat limited but basic info regarding library sizes and the number of active streams is supported. For more detailed info regarding active streams see the Plex Tautulli widget.</p> <p>Allowed fields: <code>[\"streams\", \"albums\", \"movies\", \"tv\"]</code>.</p> <pre><code>widget:\ntype: plex\nurl: http://plex.host.or.ip:32400\nkey: mytokenhere # see https://www.plexopedia.com/plex-media-server/general/plex-token/\n</code></pre>"},{"location":"services/portainer/","title":"Portainer","text":"<p>You'll need to make sure you have the correct environment set for the integration to work properly. From the Environments section inside of Portainer, click the one you'd like to connect to and observe the ID at the end of the URL (should be), something like <code>#!/endpoints/1</code>, here <code>1</code> is the value to set as the <code>env</code> value. In order to generate an API key, please follow the steps outlined here https://docs.portainer.io/api/access.</p> <p>Allowed fields: <code>[\"running\", \"stopped\", \"total\"]</code>.</p> <pre><code>widget:\ntype: portainer\nurl: https://portainer.host.or.ip:9443\nenv: 1\nkey: ptr_accesskeyaccesskeyaccesskeyaccesskey\n</code></pre>"},{"location":"services/prometheus/","title":"Prometheus","text":"<p>Allowed fields: <code>[\"targets_up\", \"targets_down\", \"targets_total\"]</code></p> <pre><code>widget:\ntype: prometheus\nurl: http://prometheushost:port\n</code></pre>"},{"location":"services/prowlarr/","title":"Prowlarr","text":"<p>Find your API key under <code>Settings &gt; General</code>.</p> <p>Allowed fields: <code>[\"numberOfGrabs\", \"numberOfQueries\", \"numberOfFailGrabs\", \"numberOfFailQueries\"]</code>.</p> <pre><code>widget:\ntype: prowlarr\nurl: http://prowlarr.host.or.ip\nkey: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"services/proxmox/","title":"Proxmox","text":"<p>This widget shows the running and total counts of both QEMU VMs and LX Containers in the Proxmox cluster. It also shows the CPU and memory usage of the first node in the cluster.</p> <p>You will need to generate an API Token for new or an existing user. Here is an example of how to do this for a new user.</p> <ol> <li>Navigate to the Proxmox portal, click on Datacenter</li> <li>Expand Permissions, click on Groups</li> <li>Click the Create button</li> <li>Name the group something informative, like api-ro-users</li> <li>Click on the Permissions \"folder\"</li> <li>Click Add -&gt; Group Permission<ul> <li>Path: /</li> <li>Group: group from bullet 4 above</li> <li>Role: PVEAuditor</li> <li>Propagate: Checked</li> </ul> </li> <li>Expand Permissions, click on Users</li> <li>Click the Add button<ul> <li>User name: something informative like <code>api</code></li> <li>Realm: Linux PAM standard authentication</li> <li>Group: group from bullet 4 above</li> </ul> </li> <li>Expand Permissions, click on API Tokens</li> <li>Click the Add button<ul> <li>User: user from bullet 8 above</li> <li>Token ID: something informative like the application or purpose like <code>homepage</code></li> <li>Privilege Separation: Checked</li> </ul> </li> <li>Go back to the \"Permissions\" menu</li> <li>Click Add -&gt; API Token Permission<ul> <li>Path: /</li> <li>API Token: select the Token ID created in Step 10</li> <li>Role: PVE Auditor</li> <li>Propagate: Checked</li> </ul> </li> </ol> <p>Use <code>username@pam!Token ID</code> as the <code>username</code> (e.g <code>api@pam!homepage</code>) setting and <code>Secret</code> as the <code>password</code> setting.</p> <p>Allowed fields: <code>[\"vms\", \"lxc\", \"resources.cpu\", \"resources.mem\"]</code>.</p> <p>You can set the optional <code>node</code> setting when you want to show metrics for a single node. By default it will show the average for the complete cluster.</p> <pre><code>widget:\ntype: proxmox\nurl: https://proxmox.host.or.ip:8006\nusername: api_token_id\npassword: api_token_secret\nnode: pve-1 # optional\n</code></pre>"},{"location":"services/pterodactyl/","title":"Pterodactyl","text":"<p>Allowed fields: <code>[\"nodes\", \"servers\"]</code></p> <pre><code>widget:\ntype: pterodactyl\nurl: http://pterodactylhost:port\nkey: pterodactylapikey\n</code></pre>"},{"location":"services/pyload/","title":"Pyload","text":"<p>Allowed fields: <code>[\"speed\", \"active\", \"queue\", \"total\"]</code>.</p> <pre><code>widget:\ntype: pyload\nurl: http://pyload.host.or.ip:port\nusername: username\npassword: password # only needed if set\n</code></pre>"},{"location":"services/qbittorrent/","title":"qBittorrent","text":"<p>Uses the same username and password used to login from the web.</p> <p>Allowed fields: <code>[\"leech\", \"download\", \"seed\", \"upload\"]</code>.</p> <pre><code>widget:\ntype: qbittorrent\nurl: http://qbittorrent.host.or.ip\nusername: username\npassword: password\n</code></pre>"},{"location":"services/qnap/","title":"QNAP","text":"<p>Allowed fields: <code>[\"cpuUsage\", \"memUsage\", \"systemTempC\", \"poolUsage\", \"volumeUsage\"]</code>.</p> <pre><code>widget:\ntype: qnap\nurl: http://qnap.host.or.ip:port\nusername: user\npassword: pass\n</code></pre> <p>If the QNAP device has multiple volumes, the poolUsage will be a sum of all volumes.</p> <p>If only a single volume needs to be tracked, add the following to your configuration and the Widget will track this as volumeUsage:</p> <pre><code>volume: Volume Name From QNAP\n</code></pre>"},{"location":"services/radarr/","title":"Radarr","text":"<p>Find your API key under <code>Settings &gt; General</code>.</p> <p>Allowed fields: <code>[\"wanted\", \"missing\", \"queued\", \"movies\"]</code>.</p> <p>A detailed queue listing is disabled by default, but can be enabled with the <code>enableQueue</code> option.</p> <pre><code>widget:\ntype: radarr\nurl: http://radarr.host.or.ip\nkey: apikeyapikeyapikeyapikeyapikey\nenableQueue: true # optional, defaults to false\n</code></pre>"},{"location":"services/readarr/","title":"Readarr","text":"<p>Find your API key under <code>Settings &gt; General</code>.</p> <p>Allowed fields: <code>[\"wanted\", \"queued\", \"books\"]</code>.</p> <pre><code>widget:\ntype: readarr\nurl: http://readarr.host.or.ip\nkey: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"services/rutorrent/","title":"ruTorrent","text":"<p>This requires the <code>httprpc</code> plugin to be installed and enabled, and is part of the default ruTorrent plugins. If you have not explicitly removed or disable this plugin, it should be available.</p> <p>Allowed fields: <code>[\"active\", \"upload\", \"download\"]</code>.</p> <pre><code>widget:\ntype: rutorrent\nurl: http://rutorrent.host.or.ip\nusername: username # optional, false if not used\npassword: password # optional, false if not used\n</code></pre>"},{"location":"services/sabnzbd/","title":"SABnzbd","text":"<p>Find your API key under <code>Config &gt; General</code>.</p> <p>Allowed fields: <code>[\"rate\", \"queue\", \"timeleft\"]</code>.</p> <pre><code>widget:\ntype: sabnzbd\nurl: http://sabnzbd.host.or.ip\nkey: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"services/scrutiny/","title":"Scrutiny","text":"<p>Allowed fields: <code>[\"passed\", \"failed\", \"unknown\"]</code>.</p> <pre><code>widget:\ntype: scrutiny\nurl: http://scrutiny.host.or.ip\n</code></pre>"},{"location":"services/sonarr/","title":"Sonarr","text":"<p>Find your API key under <code>Settings &gt; General</code>.</p> <p>Allowed fields: <code>[\"wanted\", \"queued\", \"series\"]</code>.</p> <p>A detailed queue listing is disabled by default, but can be enabled with the <code>enableQueue</code> option.</p> <pre><code>widget:\ntype: sonarr\nurl: http://sonarr.host.or.ip\nkey: apikeyapikeyapikeyapikeyapikey\nenableQueue: true # optional, defaults to false\n</code></pre>"},{"location":"services/speedtest-tracker/","title":"Speedtest Tracker","text":"<p>No extra configuration is required.</p> <p>This widget is compatible with both alexjustesen/speedtest-tracker and henrywhitaker3/Speedtest-Tracker.</p> <p>Allowed fields: <code>[\"download\", \"upload\", \"ping\"]</code>.</p> <pre><code>widget:\ntype: speedtest\nurl: http://speedtest.host.or.ip\n</code></pre>"},{"location":"services/syncthing-relay-server/","title":"Syncthing Relay Server","text":"<p>Pulls stats from the relay server. See here for more information on configuration.</p> <p>Allowed fields: <code>[\"numActiveSessions\", \"numConnections\", \"bytesProxied\"]</code>.</p> <pre><code>widget:\ntype: strelaysrv\nurl: http://syncthing.host.or.ip:22070\n</code></pre>"},{"location":"services/tailscale/","title":"Tailscale","text":"<p>You will need to generate an API access token from the keys page on the Tailscale dashboard.</p> <p>To find your device ID, go to the machine overview page and select your machine. In the \"Machine Details\" section, copy your <code>ID</code>. It will end with <code>CNTRL</code>.</p> <p>Allowed fields: <code>[\"address\", \"last_seen\", \"expires\"]</code>.</p> <pre><code>widget:\ntype: tailscale\ndeviceid: deviceid\nkey: tailscalekey\n</code></pre>"},{"location":"services/tdarr/","title":"Tdarr","text":"<p>Allowed fields: <code>[\"queue\", \"processed\", \"errored\", \"saved\"]</code>.</p> <pre><code>widget:\ntype: tdarr\nurl: http://tdarr.host.or.ip\n</code></pre>"},{"location":"services/traefik/","title":"Traefik","text":"<p>No extra configuration is required. If your traefik install requires authentication, include the username and password used to login to the web interface.</p> <p>Allowed fields: <code>[\"routers\", \"services\", \"middleware\"]</code>.</p> <pre><code>widget:\ntype: traefik\nurl: http://traefik.host.or.ip\nusername: username # optional\npassword: password # optional\n</code></pre>"},{"location":"services/transmission/","title":"Transmission","text":"<p>Uses the same username and password used to login from the web.</p> <p>Allowed fields: <code>[\"leech\", \"download\", \"seed\", \"upload\"]</code>.</p> <pre><code>widget:\ntype: transmission\nurl: http://transmission.host.or.ip\nusername: username\npassword: password\nrpcUrl: /transmission/ # Optional. Matches the value of \"rpc-url\" in your Transmission's settings.json file\n</code></pre>"},{"location":"services/truenas/","title":"TrueNas","text":"<p>Allowed fields: <code>[\"load\", \"uptime\", \"alerts\"]</code>.</p> <p>To create an API Key, follow the official TrueNAS documentation.</p> <pre><code>widget:\ntype: truenas\nurl: http://truenas.host.or.ip\nusername: user # not required if using api key\npassword: pass # not required if using api key\nkey: yourtruenasapikey # not required if using username / password\n</code></pre>"},{"location":"services/tubearchivist/","title":"Tube Archivist","text":"<p>Requires API key.</p> <p>Allowed fields: <code>[\"downloads\", \"videos\", \"channels\", \"playlists\"]</code>.</p> <pre><code>widget:\ntype: tubearchivist\nurl: http://tubearchivist.host.or.ip\nkey: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"services/unifi-controller/","title":"Unifi Controller","text":"<p>(Find the Unifi Controller information widget here)</p> <p>You can display general connectivity status from your Unifi (Network) Controller. When authenticating you will want to use an account that has at least read privileges.</p> <p>An optional 'site' parameter can be supplied, if it is not the widget will use the default site for the controller.</p> <p>Allowed fields: <code>[\"uptime\", \"wan\", \"lan_users\", \"wlan_users\"]</code>.</p> <pre><code>widget:\ntype: unifi\nurl: https://unifi.host.or.ip:port\nusername: username\npassword: password\nsite: Site Name # optional\n</code></pre> <p>Added in v0.4.18, updated in 0.6.7</p>"},{"location":"services/uptimerobot/","title":"UptimeRobot","text":"<p>To generate an API key, select <code>My Settings</code>, and either <code>Monitor-Specific API Key</code> or <code>Read-Only API Key</code>.</p> <p>A <code>Monitor-Specific API Key</code> will provide the following detailed information for the selected monitor:</p> <ul> <li>Current status</li> <li>Current uptime</li> <li>Date/time of last downtime</li> <li>Duration of last downtime</li> </ul> <p>Allowed fields: <code>[\"status\", \"uptime\", \"lastDown\", \"downDuration\"]</code>.</p> <p>A <code>Read-Only API Key</code> will provide a summary of all monitors in your account:</p> <ul> <li>Number of 'Up' monitors</li> <li>Number of 'Down' monitors</li> </ul> <p>Allowed fields: <code>[\"sitesUp\", \"sitesDown\"]</code>.</p> <pre><code>widget:\ntype: uptimerobot\nurl: https://api.uptimerobot.com\nkey: uptimerobotapitoken\n</code></pre>"},{"location":"services/urbackup/","title":"UrBackup","text":"<p>The UrBackup widget retrieves the total number of clients that currently have no errors, have errors, or haven't backed up recently. Clients are considered \"Errored\" or \"Out of Date\" if either the file or image backups for that client have errors/are out of date, unless the client does not support image backups.</p> <p>The default number of days that can elapse before a client is marked Out of Date is 3, but this value can be customized by setting the <code>maxDays</code> value in the config.</p> <p>Optionally, the widget can also report the total amount of disk space consumed by backups. This is disabled by default, because it requires a second API call.</p> <p>Note: client status is only shown for backups that the specified user has access to. Disk Usage shown is the total for all backups, regardless of permissions.</p> <p>Allowed fields: <code>[\"ok\", \"errored\", \"noRecent\", \"totalUsed\"]</code>. Note that <code>totalUsed</code> will not be shown unless explicitly included in <code>fields</code>.</p> <pre><code>widget:\ntype: urbackup\nusername: urbackupUsername\npassword: urbackupPassword\nurl: http://urbackupUrl:55414\nmaxDays: 5 # optional\n</code></pre>"},{"location":"services/watchtower/","title":"Watchtower","text":"<p>To use this widget, Watchtower needs to be configured to to enable metrics.</p> <p>Allowed fields: <code>[\"containers_scanned\", \"containers_updated\", \"containers_failed\"]</code>.</p> <pre><code>widget:\ntype: watchtower\nurl: http://your-ip-address:8080\nkey: demotoken\n</code></pre>"},{"location":"services/whatsupdocker/","title":"Whats Up Docker","text":"<p>Currently requires unauthenticated whatsupdocker instance.</p> <p>Allowed fields: <code>[\"monitoring\", \"updates\"]</code>.</p> <pre><code>widget:\ntype: whatsupdocker\nurl: http://whatsupdocker:port\n</code></pre>"},{"location":"services/xteve/","title":"Xteve","text":"<p>Allowed fields: <code>[\"streams_all\", \"streams_active\", \"streams_xepg\"]</code>.</p> <pre><code>widget:\ntype: xteve\nurl: http://xteve.host.or.ip\nusername: username # optional\npassword: password # optional\n</code></pre>"},{"location":"widgets/datetime/","title":"Date & Time","text":"<p>This allows you to display the date and/or time, can be heavily configured using Intl.DateTimeFormat.</p> <p>Formatting is locale aware and will present your date in the regional format you expect, for example, <code>9/16/22, 3:03 PM</code> for locale <code>en</code> and <code>16.09.22, 15:03</code> for <code>de</code>. You can also specify a locale just for the datetime widget with the <code>locale</code> option (see below).</p> <pre><code>- datetime:\ntext_size: xl\nformat:\ntimeStyle: short\n</code></pre> <p>Any options passed to <code>format</code> are passed directly to Intl.DateTimeFormat, please reference the MDN documentation for all available options.</p> <p>Valid text sizes are <code>4xl</code>, <code>3xl</code>, <code>2xl</code>, <code>xl</code>, <code>md</code>, <code>sm</code>, <code>xs</code>.</p> <p>A few examples,</p> <pre><code># 13:37\nformat:\ntimeStyle: short\nhourCycle: h23\n</code></pre> <pre><code># 1:37 PM\nformat:\ntimeStyle: short\nhour12: true\n</code></pre> <pre><code># 1/23/22, 1:37 PM\nformat:\ndateStyle: short\ntimeStyle: short\nhour12: true\n</code></pre> <pre><code># 4 januari 2023 om 13:51:25 PST\nlocale: nl\nformat:\ndateStyle: long\ntimeStyle: long\n</code></pre>"},{"location":"widgets/glances/","title":"Glances","text":"<p>(Find the Glances service widget here)</p> <p>The Glances widget allows you to monitor the resources (CPU, memory, storage, temp &amp; uptime) of host or another machine, and is designed to match the <code>resources</code> info widget. You can have multiple instances by adding another configuration block. The <code>cputemp</code>, <code>uptime</code> &amp; <code>disk</code> states require separate API calls and thus are not enabled by default. Glances needs to be running in \"web server\" mode to enable the API, see the glances docs.</p> <pre><code>- glances:\nurl: http://host.or.ip:port\nusername: user # optional if auth enabled in Glances\npassword: pass # optional if auth enabled in Glances\ncpu: true # optional, enabled by default, disable by setting to false\nmem: true # optional, enabled by default, disable by setting to false\ncputemp: true # disabled by default\nuptime: true # disabled by default\ndisk: / # disabled by default, use mount point of disk(s) in glances. Can also be a list (see below)\nexpanded: true # show the expanded view\nlabel: MyMachine # optional\n</code></pre> <p>Multiple disks can be specified as:</p> <pre><code>disk:\n- /\n- /boot\n...\n</code></pre> <p>Added in v0.4.18, updated in v0.6.11, v0.6.21</p>"},{"location":"widgets/greeting/","title":"Greeting","text":"<p>This allows you to display simple text, can be configured like so:</p> <pre><code>- greeting:\ntext_size: xl\ntext: Greeting Text\n</code></pre> <p>Valid text sizes are <code>4xl</code>, <code>3xl</code>, <code>2xl</code>, <code>xl</code>, <code>md</code>, <code>sm</code>, <code>xs</code>.</p>"},{"location":"widgets/kubernetes/","title":"Kubernetes","text":"<p>This is very similar to the Resources widget, but provides resource information about a Kubernetes cluster.</p> <p>It provides CPU and Memory usage, by node and/or at the cluster level.</p> <pre><code>- kubernetes:\ncluster:\n# Shows cluster-wide statistics\nshow: true\n# Shows the aggregate CPU stats\ncpu: true\n# Shows the aggregate memory stats\nmemory: true\n# Shows a custom label\nshowLabel: true\nlabel: \"cluster\"\nnodes:\n# Shows node-specific statistics\nshow: true\n# Shows the CPU for each node\ncpu: true\n# Shows the memory for each node\nmemory: true\n# Shows the label, which is always the node name\nshowLabel: true\n</code></pre>"},{"location":"widgets/logo/","title":"Logo","text":"<p>This allows you to display the homepage logo, you can optionally specify your own icon using similar options as other icons, see service icons.</p> <pre><code>- logo:\nicon: https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/I_Love_New_York.svg/1101px-I_Love_New_York.svg.png # optional\n</code></pre> <p>Added in v0.4.18, updated in 0.X.X</p>"},{"location":"widgets/longhorn/","title":"Longhorn","text":"<p>The Longhorn widget pulls storage utilization metrics from the Longhorn storage driver on Kubernetes. It is designed to appear similar to the Resource widget's disk representation.</p> <p>The exact metrics should be very similar to what is seen on the Longhorn dashboard itself.</p> <p>It can show the aggregate metrics and/or the individual node metrics.</p> <pre><code>- longhorn:\n# Show the expanded view\nexpanded: true\n# Shows a node representing the aggregate values\ntotal: true\n# Shows the node names as labels\nlabels: true\n# Show the nodes\nnodes: true\n# An explicit list of nodes to show. All are shown by default if \"nodes\" is true\ninclude:\n- node1\n- node2\n</code></pre> <p>The Longhorn URL and credentials are stored in the <code>providers</code> section of the <code>settings.yaml</code>.</p>"},{"location":"widgets/openmeteo/","title":"Open-Meteo","text":"<p>No registration is required at all! See https://open-meteo.com/en/docs</p> <pre><code>- openmeteo:\nlabel: Kyiv # optional\nlatitude: 50.449684\nlongitude: 30.525026\ntimezone: Europe/Kiev # optional\nunits: metric # or imperial\ncache: 5 # Time in minutes to cache API responses, to stay within limits\n</code></pre> <p>You can optionally not pass a <code>latitude</code> and <code>longitude</code> and the widget will use your current location (requires a secure context, eg. HTTPS).</p>"},{"location":"widgets/openweathermap/","title":"OpenWeatherMap","text":"<p>The free tier \"One Call API\" is all thats required, you will need to subscribe and grab your API key.</p> <pre><code>- openweathermap:\nlabel: Kyiv #optional\nlatitude: 50.449684\nlongitude: 30.525026\nunits: metric # or imperial\nprovider: openweathermap\napiKey: youropenweathermapkey # required only if not using provider, this reveals api key in requests\ncache: 5 # Time in minutes to cache API responses, to stay within limits\n</code></pre> <p>You can optionally not pass a <code>latitude</code> and <code>longitude</code> and the widget will use your current location (requires a secure context, eg. HTTPS).</p>"},{"location":"widgets/resources/","title":"Resources","text":"<p>You can include all or some of the available resources. If you do not want to see that resource, simply pass <code>false</code>.</p> <p>The disk path is the path reported by <code>df</code> (Mounted On), or the mount point of the disk.</p> <p>The cpu and memory resource information are the container's usage while glances displays statistics for the host machine on which it is installed.</p> <p>Note: unfortunately, the package used for getting CPU temp (systeminformation) is not compatibile with some setups and will not report any value(s) for CPU temp.</p> <p>Any disk you wish to access must be mounted to your container as a volume.</p> <pre><code>- resources:\ncpu: true\nmemory: true\ndisk: /disk/mount/path\ncputemp: true\nuptime: true\nunits: imperial # only used by cpu temp\nrefresh: 3000 # optional, in ms\n</code></pre> <p>You can also pass a <code>label</code> option, which allows you to group resources under named sections,</p> <pre><code>- resources:\nlabel: System\ncpu: true\nmemory: true\n- resources:\nlabel: Storage\ndisk: /mnt/storage\n</code></pre> <p>Which produces something like this,</p> <p></p> <p>If you have more than a single disk and would like to group them together under the same label, you can pass an array of paths instead,</p> <pre><code>- resources:\nlabel: Storage\ndisk:\n- /mnt/storage\n- /mnt/backup\n- /mnt/media\n</code></pre> <p>To produce something like this,</p> <p></p> <p>You can additionally supply an optional <code>expanded</code> property set to true in order to show additional details about the resources. By default the expanded property is set to false when not supplied.</p> <pre><code>- resources:\nlabel: Array Disks\nexpanded: true\ndisk:\n- /disk1\n- /disk2\n- /disk3\n</code></pre> <p></p>"},{"location":"widgets/search/","title":"Search","text":"<p>You can add a search bar to your top widget area that can search using Google, Duckduckgo, Bing, Baidu, Brave or any other custom provider that supports the basic <code>?q=</code> search query param.</p> <pre><code>- search:\nprovider: google # google, duckduckgo, bing, baidu, brave or custom\nfocus: true # Optional, will set focus to the search bar on page load\ntarget: _blank # One of _self, _blank, _parent or _top\n</code></pre> <p>or for a custom search:</p> <pre><code>- search:\nprovider: custom\nurl: https://lougle.com/?q=\ntarget: _blank\n</code></pre> <p>multiple providers is also supported via a dropdown (excluding custom):</p> <pre><code>- search:\nprovider: [brave, google, duckduckgo]\n</code></pre> <p>Added in v0.1.6, updated in 0.6.0</p>"},{"location":"widgets/unifi_controller/","title":"Unifi Controller","text":"<p>(Find the Unifi Controller service widget here)</p> <p>You can display general connectivity status from your Unifi (Network) Controller. When authenticating you will want to use a local account that has at least read privileges.</p> <p>An optional 'site' parameter can be supplied, if it is not the widget will use the default site for the controller.</p> <p>Note: If you enter e.g. incorrect credentials and receive an \"API Error\", you may need to recreate the container to clear the cache.</p> <p></p> <pre><code>- unifi_console:\nurl: https://unifi.host.or.ip:port\nusername: user\npassword: pass\nsite: Site Name # optional\n</code></pre> <p>Added in v0.4.18, updated in 0.6.7</p>"},{"location":"widgets/weather/","title":"Weather API","text":"<p>Note: this widget is considered 'deprecated' since there is no longer a free Weather API tier for new members. See the openmeteo or openweathermap widgets for alternatives.</p> <p>The free tier is all thats required, you will need to register and grab your API key.</p> <pre><code>- weatherapi:\nlabel: Kyiv # optional\nlatitude: 50.449684\nlongitude: 30.525026\nunits: metric # or imperial\napiKey: yourweatherapikey\ncache: 5 # Time in minutes to cache API responses, to stay within limits\n</code></pre> <p>You can optionally not pass a <code>latitude</code> and <code>longitude</code> and the widget will use your current location (requires a secure context, eg. HTTPS).</p>"}]}